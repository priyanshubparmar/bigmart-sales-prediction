{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "736b46b2-a2a3-4281-a0dd-eeca78cd913a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "%matplotlib inline\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder, FunctionTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "92ac7588-2f07-4705-862a-9e5c3956c172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDW58</td>\n",
       "      <td>20.750</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.007565</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>107.8622</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FDW14</td>\n",
       "      <td>8.300</td>\n",
       "      <td>reg</td>\n",
       "      <td>0.038428</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>87.3198</td>\n",
       "      <td>OUT017</td>\n",
       "      <td>2007</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 2</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NCN55</td>\n",
       "      <td>14.600</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.099575</td>\n",
       "      <td>Others</td>\n",
       "      <td>241.7538</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDQ58</td>\n",
       "      <td>7.315</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.015388</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>155.0340</td>\n",
       "      <td>OUT017</td>\n",
       "      <td>2007</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 2</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FDY38</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.118599</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>234.2300</td>\n",
       "      <td>OUT027</td>\n",
       "      <td>1985</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility    Item_Type  \\\n",
       "0           FDW58       20.750          Low Fat         0.007565  Snack Foods   \n",
       "1           FDW14        8.300              reg         0.038428        Dairy   \n",
       "2           NCN55       14.600          Low Fat         0.099575       Others   \n",
       "3           FDQ58        7.315          Low Fat         0.015388  Snack Foods   \n",
       "4           FDY38          NaN          Regular         0.118599        Dairy   \n",
       "\n",
       "   Item_MRP Outlet_Identifier  Outlet_Establishment_Year Outlet_Size  \\\n",
       "0  107.8622            OUT049                       1999      Medium   \n",
       "1   87.3198            OUT017                       2007         NaN   \n",
       "2  241.7538            OUT010                       1998         NaN   \n",
       "3  155.0340            OUT017                       2007         NaN   \n",
       "4  234.2300            OUT027                       1985      Medium   \n",
       "\n",
       "  Outlet_Location_Type        Outlet_Type  \n",
       "0               Tier 1  Supermarket Type1  \n",
       "1               Tier 2  Supermarket Type1  \n",
       "2               Tier 3      Grocery Store  \n",
       "3               Tier 2  Supermarket Type1  \n",
       "4               Tier 3  Supermarket Type3  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing data.\n",
    "df = pd.read_csv(\"train.csv\")\n",
    "test = pd.read_csv(\"test.csv\")\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78c1da76-511e-4ddd-8f0a-c338329568a1",
   "metadata": {},
   "source": [
    "# Basic step.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1886b6d6-dcfe-4d8e-bbfc-714293ca52cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8523 entries, 0 to 8522\n",
      "Data columns (total 12 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Item_Identifier            8523 non-null   object \n",
      " 1   Item_Weight                7060 non-null   float64\n",
      " 2   Item_Fat_Content           8523 non-null   object \n",
      " 3   Item_Visibility            8523 non-null   float64\n",
      " 4   Item_Type                  8523 non-null   object \n",
      " 5   Item_MRP                   8523 non-null   float64\n",
      " 6   Outlet_Identifier          8523 non-null   object \n",
      " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
      " 8   Outlet_Size                6113 non-null   object \n",
      " 9   Outlet_Location_Type       8523 non-null   object \n",
      " 10  Outlet_Type                8523 non-null   object \n",
      " 11  Item_Outlet_Sales          8523 non-null   float64\n",
      "dtypes: float64(4), int64(1), object(7)\n",
      "memory usage: 799.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f37e1c30-a606-42e9-9e98-9b0b4e5450c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier               object\n",
       "Item_Weight                  float64\n",
       "Item_Fat_Content              object\n",
       "Item_Visibility              float64\n",
       "Item_Type                     object\n",
       "Item_MRP                     float64\n",
       "Outlet_Identifier             object\n",
       "Outlet_Establishment_Year      int64\n",
       "Outlet_Size                   object\n",
       "Outlet_Location_Type          object\n",
       "Outlet_Type                   object\n",
       "Item_Outlet_Sales            float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "853b7ff4-a3f8-4abc-82a5-5658afe9def4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7060.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "      <td>8523.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12.857645</td>\n",
       "      <td>0.066132</td>\n",
       "      <td>140.992782</td>\n",
       "      <td>1997.831867</td>\n",
       "      <td>2181.288914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.643456</td>\n",
       "      <td>0.051598</td>\n",
       "      <td>62.275067</td>\n",
       "      <td>8.371760</td>\n",
       "      <td>1706.499616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.555000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.290000</td>\n",
       "      <td>1985.000000</td>\n",
       "      <td>33.290000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.773750</td>\n",
       "      <td>0.026989</td>\n",
       "      <td>93.826500</td>\n",
       "      <td>1987.000000</td>\n",
       "      <td>834.247400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>12.600000</td>\n",
       "      <td>0.053931</td>\n",
       "      <td>143.012800</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>1794.331000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.850000</td>\n",
       "      <td>0.094585</td>\n",
       "      <td>185.643700</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>3101.296400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>21.350000</td>\n",
       "      <td>0.328391</td>\n",
       "      <td>266.888400</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>13086.964800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Item_Weight  Item_Visibility     Item_MRP  Outlet_Establishment_Year  \\\n",
       "count  7060.000000      8523.000000  8523.000000                8523.000000   \n",
       "mean     12.857645         0.066132   140.992782                1997.831867   \n",
       "std       4.643456         0.051598    62.275067                   8.371760   \n",
       "min       4.555000         0.000000    31.290000                1985.000000   \n",
       "25%       8.773750         0.026989    93.826500                1987.000000   \n",
       "50%      12.600000         0.053931   143.012800                1999.000000   \n",
       "75%      16.850000         0.094585   185.643700                2004.000000   \n",
       "max      21.350000         0.328391   266.888400                2009.000000   \n",
       "\n",
       "       Item_Outlet_Sales  \n",
       "count        8523.000000  \n",
       "mean         2181.288914  \n",
       "std          1706.499616  \n",
       "min            33.290000  \n",
       "25%           834.247400  \n",
       "50%          1794.331000  \n",
       "75%          3101.296400  \n",
       "max         13086.964800  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "877d76d5-6ddd-49b5-a65e-d99da778e92a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier              1559\n",
       "Item_Weight                   416\n",
       "Item_Fat_Content                5\n",
       "Item_Visibility              7880\n",
       "Item_Type                      16\n",
       "Item_MRP                     5938\n",
       "Outlet_Identifier              10\n",
       "Outlet_Establishment_Year       9\n",
       "Outlet_Size                     4\n",
       "Outlet_Location_Type            3\n",
       "Outlet_Type                     4\n",
       "Item_Outlet_Sales            3493\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# unique value count.\n",
    "df.apply(lambda x: len(x.unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "542cf60f-da69-4034-90f2-45530dddde76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                  1463\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  2410\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sum value.\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1d237883-c488-42e1-9e77-090d31558d1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>772</th>\n",
       "      <td>DRC12</td>\n",
       "      <td>17.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4605</th>\n",
       "      <td>DRC12</td>\n",
       "      <td>17.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7062</th>\n",
       "      <td>DRC12</td>\n",
       "      <td>17.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>DRC12</td>\n",
       "      <td>17.85</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Item_Identifier  Item_Weight\n",
       "772            DRC12        17.85\n",
       "4605           DRC12        17.85\n",
       "7062           DRC12        17.85\n",
       "7557           DRC12        17.85"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# identifying best way to fill Item_Weight.\n",
    "df.loc[df[\"Item_Identifier\"] == \"DRC12\", [\"Item_Identifier\", \"Item_Weight\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "053cf99a-4b63-46dc-b62f-89a408935eb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Item_Identifier',\n",
       " 'Item_Fat_Content',\n",
       " 'Item_Type',\n",
       " 'Outlet_Identifier',\n",
       " 'Outlet_Size',\n",
       " 'Outlet_Location_Type',\n",
       " 'Outlet_Type']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_col = []\n",
    "for x in df.dtypes.index:\n",
    "    if df.dtypes[x]  ==  \"object\":\n",
    "        c_col.append(x)\n",
    "c_col\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "37bebe13-e655-4a31-935c-a7c472586c01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Item_Fat_Content\n",
      "Item_Fat_Content\n",
      "Low Fat    5089\n",
      "Regular    2889\n",
      "LF          316\n",
      "reg         117\n",
      "low fat     112\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Item_Type\n",
      "Item_Type\n",
      "Fruits and Vegetables    1232\n",
      "Snack Foods              1200\n",
      "Household                 910\n",
      "Frozen Foods              856\n",
      "Dairy                     682\n",
      "Canned                    649\n",
      "Baking Goods              648\n",
      "Health and Hygiene        520\n",
      "Soft Drinks               445\n",
      "Meat                      425\n",
      "Breads                    251\n",
      "Hard Drinks               214\n",
      "Others                    169\n",
      "Starchy Foods             148\n",
      "Breakfast                 110\n",
      "Seafood                    64\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Outlet_Size\n",
      "Outlet_Size\n",
      "Medium    2793\n",
      "Small     2388\n",
      "High       932\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Outlet_Location_Type\n",
      "Outlet_Location_Type\n",
      "Tier 3    3350\n",
      "Tier 2    2785\n",
      "Tier 1    2388\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Outlet_Type\n",
      "Outlet_Type\n",
      "Supermarket Type1    5577\n",
      "Grocery Store        1083\n",
      "Supermarket Type3     935\n",
      "Supermarket Type2     928\n",
      "Name: count, dtype: int64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "c_col.remove('Item_Identifier')\n",
    "c_col.remove('Outlet_Identifier')\n",
    "for col in c_col:\n",
    "    print(col)\n",
    "    print(df[col].value_counts())\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "83978c53-c446-426e-b95f-48ce18024573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                     4\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  2410\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filling the weight with its id's mean.\n",
    "df[\"Item_Weight\"].fillna(df.groupby(\"Item_Identifier\")[\"Item_Weight\"].transform(\"mean\"), inplace=True)\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "83d23102-c782-466a-bc45-2e693582c5e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Item_Weight\"].fillna(df[\"Item_Weight\"].mean(), inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e7567d4a-e698-40b5-bc43-2a5f810ed606",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                     0\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  2410\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ab296937-9742-44db-9fde-5f1a09e09b1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Grocery Store</th>\n",
       "      <th>Supermarket Type1</th>\n",
       "      <th>Supermarket Type2</th>\n",
       "      <th>Supermarket Type3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Outlet_Size</th>\n",
       "      <td>Small</td>\n",
       "      <td>Small</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Outlet_Type Grocery Store Supermarket Type1 Supermarket Type2  \\\n",
       "Outlet_Size         Small             Small            Medium   \n",
       "\n",
       "Outlet_Type Supermarket Type3  \n",
       "Outlet_Size            Medium  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filling the Outlet_Size\n",
    "# Create a pivot table of the most frequent Outlet_Size for each Outlet_Type\n",
    "df.pivot_table(values=\"Outlet_Size\", columns=\"Outlet_Type\", aggfunc=lambda x: x.mode()[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "49645495-a1be-475d-8f57-e939592b3d2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Outlet_Location_Type  Outlet_Type      \n",
       "Tier 1                Grocery Store         Small\n",
       "                      Supermarket Type1    Medium\n",
       "Tier 2                Supermarket Type1     Small\n",
       "Tier 3                Grocery Store           NaN\n",
       "                      Supermarket Type1      High\n",
       "                      Supermarket Type2    Medium\n",
       "                      Supermarket Type3    Medium\n",
       "Name: Outlet_Size, dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "group_modes = (\n",
    "    df.groupby([\"Outlet_Location_Type\", \"Outlet_Type\"])[\"Outlet_Size\"]\n",
    "    .agg(lambda x: x.mode()[0] if not x.mode().empty else np.nan)\n",
    ")\n",
    "group_modes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5861f3e9-4661-4fad-9eca-c3ec135334a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'Small'], dtype=object)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[\n",
    "    (df[\"Outlet_Type\"] == \"Grocery Store\"), \n",
    "    \"Outlet_Size\"\n",
    "].unique()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "99dc3b50-041c-4b86-8356-4f2faa1b59b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mapping dictionary\n",
    "size_mapping = {\n",
    "    (\"Tier 1\", \"Grocery Store\"): \"Small\",  \n",
    "    (\"Tier 1\", \"Supermarket Type1\"): \"Medium\", \n",
    "    (\"Tier 2\", \"Supermarket Type1\"): \"Small\",\n",
    "    (\"Tier 3\", \"Grocery Store\"): \"Small\",   # <-- since all Grocery Store has the small type.\n",
    "    (\"Tier 3\", \"Supermarket Type1\"): \"High\",\n",
    "    (\"Tier 3\", \"Supermarket Type2\"): \"Medium\",\n",
    "    (\"Tier 3\", \"Supermarket Type3\"): \"Medium\",\n",
    "}\n",
    "\n",
    "# Apply mapping\n",
    "df[\"Outlet_Size\"] = df.apply(\n",
    "    lambda row: size_mapping.get((row[\"Outlet_Location_Type\"], row[\"Outlet_Type\"]), row[\"Outlet_Size\"]),\n",
    "    axis=1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c4470237-f168-4a11-a1ba-c5eec330a382",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier              0\n",
       "Item_Weight                  0\n",
       "Item_Fat_Content             0\n",
       "Item_Visibility              0\n",
       "Item_Type                    0\n",
       "Item_MRP                     0\n",
       "Outlet_Identifier            0\n",
       "Outlet_Establishment_Year    0\n",
       "Outlet_Size                  0\n",
       "Outlet_Location_Type         0\n",
       "Outlet_Type                  0\n",
       "Item_Outlet_Sales            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "76d98c85-78c0-46d2-8f7c-9294433a184c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace 0 with NaN\n",
    "df[\"Item_Visibility\"].replace(0, np.nan, inplace=True)\n",
    "# Fill with mean visibility per Item_Identifier\n",
    "df[\"Item_Visibility\"] = df.groupby(\"Item_Identifier\")[\"Item_Visibility\"].transform(\n",
    "    lambda x: x.fillna(x.mean())\n",
    ")\n",
    "# Still NaN? Fill with overall mean\n",
    "df[\"Item_Visibility\"].fillna(df[\"Item_Visibility\"].mean(), inplace=True)\n",
    "q99 = df[\"Item_Visibility\"].quantile(0.99)\n",
    "df.loc[df[\"Item_Visibility\"] > q99, \"Item_Visibility\"] = q99\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa4dcb6d-fafc-4ec1-b6c0-8c6026873fac",
   "metadata": {},
   "source": [
    "# all missing value is done."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5f813012-95c0-4dc7-8c96-1abce801b41f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # --- Fix inconsistent categories in Item_Fat_Content ---\n",
    "df[\"Item_Fat_Content\"] = df[\"Item_Fat_Content\"].replace({\"low fat\": \"Low Fat\",\"LF\": \"Low Fat\",\"reg\": \"Regular\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43f58a6e-119d-4f97-81f6-4cbb89cf8ab0",
   "metadata": {},
   "source": [
    "# making the pipeline to make esay to use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ef2defbc-37d8-4adb-a02c-478ac47dee0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CustomImputer(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self):\n",
    "        self.item_mean = None\n",
    "        self.overall_mean = None\n",
    "        self.group_modes = None\n",
    "        self.type_modes = None\n",
    "\n",
    "    def fit(self, X, y=None):\n",
    "        # Step 1: Store mean per Item_Identifier and overall mean.\n",
    "        self.item_mean = X.groupby(\"Item_Identifier\")[\"Item_Weight\"].mean()\n",
    "        self.overall_mean = X[\"Item_Weight\"].mean()\n",
    "\n",
    "        # Step 2: Store mode by (Location, Type) and by only Type\n",
    "        self.group_modes = (\n",
    "            X.groupby([\"Outlet_Location_Type\", \"Outlet_Type\"])[\"Outlet_Size\"]\n",
    "            .agg(lambda x: x.mode()[0] if not x.mode().empty else np.nan)\n",
    "        )\n",
    "        self.type_modes = (\n",
    "            X.groupby([\"Outlet_Type\"])[\"Outlet_Size\"]\n",
    "            .agg(lambda x: x.mode()[0] if not x.mode().empty else np.nan)\n",
    "        )\n",
    "        return self\n",
    "\n",
    "    def transform(self, X):\n",
    "        X = X.copy()\n",
    "\n",
    "        # --- Item_Weight Imputation ---\n",
    "        X[\"Item_Weight\"] = X.apply(\n",
    "            lambda row: self.item_mean.get(row[\"Item_Identifier\"], np.nan)\n",
    "            if pd.isnull(row[\"Item_Weight\"]) else row[\"Item_Weight\"],\n",
    "            axis=1\n",
    "        )\n",
    "        X[\"Item_Weight\"] = X[\"Item_Weight\"].fillna(self.overall_mean)\n",
    "\n",
    "        # --- Outlet_Size Imputation ---\n",
    "        def fill_outlet_size(row):\n",
    "            if pd.isnull(row[\"Outlet_Size\"]):\n",
    "                val = self.group_modes.get((row[\"Outlet_Location_Type\"], row[\"Outlet_Type\"]), np.nan)\n",
    "                if pd.isnull(val):\n",
    "                    val = self.type_modes.get(row[\"Outlet_Type\"], np.nan)\n",
    "                if pd.isnull(val):\n",
    "                    val = \"Unknown\"\n",
    "                return val\n",
    "            return row[\"Outlet_Size\"]\n",
    "\n",
    "        X[\"Outlet_Size\"] = X.apply(fill_outlet_size, axis=1)\n",
    "\n",
    "        # ====== Handle Item_Visibility ======\n",
    "        # Replace 0 with NaN\n",
    "        X[\"Item_Visibility\"].replace(0, np.nan, inplace=True)\n",
    "        \n",
    "        # Fill with mean visibility per Item_Identifier\n",
    "        X[\"Item_Visibility\"] = X.groupby(\"Item_Identifier\")[\"Item_Visibility\"].transform(\n",
    "            lambda x: x.fillna(x.mean())\n",
    "        )\n",
    "        \n",
    "        # Still NaN? Fill with overall mean\n",
    "        X[\"Item_Visibility\"].fillna(X[\"Item_Visibility\"].mean(), inplace=True)\n",
    "        \n",
    "        # Cap extreme values at 99th percentile\n",
    "        q99 = X[\"Item_Visibility\"].quantile(0.99)\n",
    "        X.loc[X[\"Item_Visibility\"] > q99, \"Item_Visibility\"] = q99\n",
    "\n",
    "        # # --- Fix inconsistent categories in Item_Fat_Content ---\n",
    "        X[\"Item_Fat_Content\"] = X[\"Item_Fat_Content\"].replace({\"low fat\": \"Low Fat\",\"LF\": \"Low Fat\",\"reg\": \"Regular\"})\n",
    "        \n",
    "        # --- Final fallback for any leftover missing ---\n",
    "        for col in X.columns:\n",
    "            if X[col].dtype == \"object\":\n",
    "                X[col] = X[col].fillna(\"Unknown\")\n",
    "            else:\n",
    "                X[col] = X[col].fillna(0)\n",
    "\n",
    "        return X\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "258f9f78-8297-470a-88c6-e8b2da7a772a",
   "metadata": {},
   "source": [
    "# Engineer features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e4ddf753-9e13-41f5-9c00-c8c88830c64d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Item Age (years since manufacturing)\n",
    "df['Item_Age'] = 2013 - df['Item_Identifier'].str.extract(r'(\\d+)').astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bd9ccbbb-9682-4f5e-9f34-58cd2604512c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Outlet Age (years since establishment)\n",
    "df['Outlet_Age'] = 2013 - df['Outlet_Establishment_Year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0417238a-9946-460c-a888-d4fea538a6eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. Visibility Ratio (visibility compared to average of that item)\n",
    "df['Visibility_Avg'] = df.groupby('Item_Identifier')['Item_Visibility'].transform('mean')\n",
    "df['Visibility_Ratio'] = df['Item_Visibility'] / df['Visibility_Avg']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "8ca72c97-b599-418d-bd3c-e95ae721c245",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4. Log-transform of Item_MRP (to reduce skewness)\n",
    "df['Item_MRP_Log'] = np.log1p(df['Item_MRP'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "4d04cdfa-83b3-4be9-aec8-faec71fe53ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. Interaction Features\n",
    "df['Item_Weight_x_Item_Visibility'] = df['Item_Weight'] * df['Item_Visibility']\n",
    "df['Item_Weight_x_Outlet_Age'] = df['Item_Weight'] * df['Outlet_Age']\n",
    "df['MRP_x_Visibility'] = df['Item_MRP'] * df['Item_Visibility']\n",
    "# Interaction of visibility with Outlet_Size\n",
    "df['Visibility_x_Size'] = df['Item_Visibility'] * df['Outlet_Size'].map({'Small':1, 'Medium':2, 'High':3})\n",
    "\n",
    "# Interaction of visibility with Outlet_Location_Type (Tier)\n",
    "df['Visibility_x_Tier'] = df['Item_Visibility'] * df['Outlet_Location_Type'].map({'Tier 1':1, 'Tier 2':2, 'Tier 3':3})\n",
    "\n",
    "# Interaction of visibility with Outlet_Type (supermarket/grocery)\n",
    "df['Visibility_x_OutletType'] = df['Item_Visibility'].astype(float) * df['Outlet_Type'].astype('category').cat.codes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "929ea540-5e02-45b2-abc6-eed0e75ab746",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9d1da9da-dcf4-4227-aa74-0e75cd766fa7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Fat_Content\n",
       "Low Fat    5517\n",
       "Regular    3006\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Item_Fat_Content\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "769bb26a-f505-4761-8a10-cbdc35fcfb30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "New_Item_type\n",
       "FOOD              6125\n",
       "Non-Consumable    1599\n",
       "Drinks             799\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['New_Item_type'] = df['Item_Identifier'].apply(lambda x: x[:2])\n",
    "df['New_Item_type'] = df['New_Item_type'].map({'FD':'FOOD','NC':'Non-Consumable','DR':'Drinks'})\n",
    "df['New_Item_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b7f1ffd4-3771-498e-8705-87160c7a8c69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Fat_Content\n",
       "Low Fat       3918\n",
       "Regular       3006\n",
       "Non-Edible    1599\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['New_Item_type']=='Non-Consumable','Item_Fat_Content'] = 'Non-Edible'\n",
    "df['Item_Fat_Content'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "267ea8bf-1d39-4b6f-a0a9-c513481753cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------------------\n",
    "# STEP 2: Feature Engineering\n",
    "# --------------------------\n",
    "import numpy as np\n",
    "\n",
    "def feature_engineering(df):\n",
    "    df = df.copy()\n",
    "\n",
    "    # New Item Type\n",
    "    df['New_Item_type'] = df['Item_Identifier'].apply(lambda x: x[:2])\n",
    "    df['New_Item_type'] = df['New_Item_type'].map({'FD':'FOOD','NC':'Non-Consumable','DR':'Drinks'})\n",
    "\n",
    "    # Outlet Age\n",
    "    df['Outlet_Age'] = 2013 - df['Outlet_Establishment_Year']\n",
    "\n",
    "    # Item Age (if identifier has digits)\n",
    "    df['Item_Age'] = 2013 - df['Item_Identifier'].str.extract(r'(\\d+)').astype(float)\n",
    "\n",
    "    # Visibility Ratio\n",
    "    df['Visibility_Avg'] = df.groupby('Item_Identifier')['Item_Visibility'].transform('mean')\n",
    "    df['Visibility_Ratio'] = df['Item_Visibility'] / df['Visibility_Avg']\n",
    "\n",
    "    # Log transform of Item_MRP\n",
    "    df['Item_MRP_Log'] = np.log1p(df['Item_MRP'])\n",
    "\n",
    "    # Interaction Features\n",
    "    df['Item_Weight_x_Item_Visibility'] = df['Item_Weight'] * df['Item_Visibility']\n",
    "    df['Item_Weight_x_Outlet_Age'] = df['Item_Weight'] * df['Outlet_Age']\n",
    "    df['MRP_x_Visibility'] = df['Item_MRP'] * df['Item_Visibility']\n",
    "\n",
    "    # Interactions with categorical variables\n",
    "    df['Visibility_x_Size'] = df['Item_Visibility'] * df['Outlet_Size'].map({'Small':1, 'Medium':2, 'High':3})\n",
    "    df['Visibility_x_Tier'] = df['Item_Visibility'] * df['Outlet_Location_Type'].map({'Tier 1':1, 'Tier 2':2, 'Tier 3':3})\n",
    "    df['Visibility_x_OutletType'] = df['Item_Visibility'].astype(float) * df['Outlet_Type'].astype('category').cat.codes\n",
    "\n",
    "    return df\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3cd3e870-ceb1-4189-a636-66da65dc17e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                   object\n",
       "Item_Weight                      float64\n",
       "Item_Fat_Content                  object\n",
       "Item_Visibility                  float64\n",
       "Item_Type                         object\n",
       "Item_MRP                         float64\n",
       "Outlet_Identifier                 object\n",
       "Outlet_Establishment_Year          int64\n",
       "Outlet_Size                       object\n",
       "Outlet_Location_Type              object\n",
       "Outlet_Type                       object\n",
       "Item_Outlet_Sales                float64\n",
       "New_Item_type                     object\n",
       "Item_Age                         float64\n",
       "Outlet_Age                         int64\n",
       "Visibility_Avg                   float64\n",
       "Visibility_Ratio                 float64\n",
       "Item_MRP_Log                     float64\n",
       "Item_Weight_x_Item_Visibility    float64\n",
       "Item_Weight_x_Outlet_Age         float64\n",
       "MRP_x_Visibility                 float64\n",
       "Visibility_x_Size                float64\n",
       "Visibility_x_Tier                float64\n",
       "Visibility_x_OutletType          float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "50c79da5-6c41-46d6-9105-8a51af674484",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       0.017387\n",
       "1       0.019219\n",
       "2       0.020145\n",
       "3       0.022911\n",
       "4       0.016164\n",
       "          ...   \n",
       "8518    0.061705\n",
       "8519    0.046952\n",
       "8520    0.035203\n",
       "8521    0.144823\n",
       "8522    0.051565\n",
       "Name: Visibility_Avg, Length: 8523, dtype: float64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "cca7aecc-489e-461e-9723-97c1780c8efa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# droping  un wanted variable. Item_Identifier, Item_MRP, Outlet_Identifier, \tOutlet_Establishment_Year, Item_Type\n",
    "class ColumnDropper(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, columns=None):\n",
    "        self.columns = columns\n",
    "    \n",
    "    def fit(self, X, y=None):\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X):\n",
    "        return X.drop(self.columns, axis=1)\n",
    "\n",
    "drop_cols = [\"Item_Identifier\", \"Item_MRP\", \"Outlet_Establishment_Year\", \"Item_Type\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "764ae4bc-886f-4736-b7e1-dfa7ce779e04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Item_Identifier',\n",
       " 'Item_Fat_Content',\n",
       " 'Item_Type',\n",
       " 'Outlet_Identifier',\n",
       " 'Outlet_Size',\n",
       " 'Outlet_Location_Type',\n",
       " 'Outlet_Type',\n",
       " 'New_Item_type']"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_col = []\n",
    "for x in df.dtypes.index:\n",
    "    if df.dtypes[x]  ==  \"object\":\n",
    "        c_col.append(x)\n",
    "c_col\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "120004dd-44b2-41f2-9637-2ceae28cf4d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------------------\n",
    "# STEP 3: Column Dropper\n",
    "# --------------------------\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "class ColumnDropper(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, columns_to_drop=None):\n",
    "        if columns_to_drop is None:\n",
    "            # Default columns to drop based on your requirements\n",
    "            self.columns_to_drop = [\n",
    "                'Item_Identifier',           # Just an ID, no predictive info\n",
    "                'Outlet_Establishment_Year', # Redundant because we have Outlet_Age\n",
    "                'Item_Type',                 # High-cardinality, replaced by New_Item_type\n",
    "                'Item_MRP',                  # Raw version replaced by Item_MRP_Log\n",
    "                'Item_Visibility'            # Raw version replaced by Visibility_Avg & Visibility_Ratio\n",
    "            ]\n",
    "        else:\n",
    "            self.columns_to_drop = columns_to_drop\n",
    "    \n",
    "    def fit(self, X, y=None):\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X):\n",
    "        X = X.copy()\n",
    "        # Only drop columns that actually exist in the dataframe\n",
    "        existing_cols_to_drop = [col for col in self.columns_to_drop if col in X.columns]\n",
    "        if existing_cols_to_drop:\n",
    "            X = X.drop(columns=existing_cols_to_drop)\n",
    "        return X\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "97af7b65-1e3a-4020-8817-943674257c8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------------------\n",
    "# STEP 4: Categorical Encoder\n",
    "# --------------------------\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "class CategoricalEncoder(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, categorical_columns=None):\n",
    "        if categorical_columns is None:\n",
    "            # Default categorical columns (after dropping some in step 3)\n",
    "            self.categorical_columns = [\n",
    "                'Item_Fat_Content',\n",
    "                'Outlet_Identifier', \n",
    "                'Outlet_Size',\n",
    "                'Outlet_Location_Type',\n",
    "                'Outlet_Type',\n",
    "                'New_Item_type'\n",
    "            ]\n",
    "        else:\n",
    "            self.categorical_columns = categorical_columns\n",
    "        \n",
    "        self.label_encoders = {}\n",
    "    \n",
    "    def fit(self, X, y=None):\n",
    "        X = X.copy()\n",
    "        \n",
    "        # Initialize and fit label encoders for each categorical column\n",
    "        for col in self.categorical_columns:\n",
    "            if col in X.columns:\n",
    "                # Handle any remaining NaN values by converting to string\n",
    "                X[col] = X[col].astype(str)\n",
    "                \n",
    "                le = LabelEncoder()\n",
    "                le.fit(X[col])\n",
    "                self.label_encoders[col] = le\n",
    "        \n",
    "        return self\n",
    "    \n",
    "    def transform(self, X):\n",
    "        X = X.copy()\n",
    "        \n",
    "        # Transform each categorical column using fitted encoders\n",
    "        for col in self.categorical_columns:\n",
    "            if col in X.columns and col in self.label_encoders:\n",
    "                # Handle any remaining NaN values by converting to string\n",
    "                X[col] = X[col].astype(str)\n",
    "                \n",
    "                # Handle unseen categories during transform\n",
    "                le = self.label_encoders[col]\n",
    "                \n",
    "                # Map unseen categories to the first class (index 0) or create a mapping\n",
    "                def safe_transform(value):\n",
    "                    if value in le.classes_:\n",
    "                        return le.transform([value])[0]\n",
    "                    else:\n",
    "                        # Return 0 for unseen categories (maps to first class)\n",
    "                        return 0\n",
    "                \n",
    "                X[col] = X[col].apply(safe_transform)\n",
    "        \n",
    "        return X\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "c7916596-37f9-4002-ba72-732212b86b01",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('imputer', CustomImputer()),\n",
    "    ('feature_eng', FunctionTransformer(feature_engineering)),\n",
    "    ('column_dropper', ColumnDropper()),\n",
    "    ('categorical_encoder', CategoricalEncoder())\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "59f2bc8c-e778-4c2f-bba6-d8cd2709ee3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit and transform\n",
    "df_pro = pipeline.fit_transform(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "f22c52c7-e897-499f-bace-56a08361cc13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <th>New_Item_type</th>\n",
       "      <th>Outlet_Age</th>\n",
       "      <th>Item_Age</th>\n",
       "      <th>Visibility_Avg</th>\n",
       "      <th>Visibility_Ratio</th>\n",
       "      <th>Item_MRP_Log</th>\n",
       "      <th>Item_Weight_x_Item_Visibility</th>\n",
       "      <th>Item_Weight_x_Outlet_Age</th>\n",
       "      <th>MRP_x_Visibility</th>\n",
       "      <th>Visibility_x_Size</th>\n",
       "      <th>Visibility_x_Tier</th>\n",
       "      <th>Visibility_x_OutletType</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.300</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3735.1380</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>0.017387</td>\n",
       "      <td>0.922960</td>\n",
       "      <td>5.524692</td>\n",
       "      <td>0.149240</td>\n",
       "      <td>130.20</td>\n",
       "      <td>4.008763</td>\n",
       "      <td>0.032095</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>0.016047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.920</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>443.4228</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>0.019219</td>\n",
       "      <td>1.003057</td>\n",
       "      <td>3.897299</td>\n",
       "      <td>0.114127</td>\n",
       "      <td>23.68</td>\n",
       "      <td>0.930544</td>\n",
       "      <td>0.038556</td>\n",
       "      <td>0.057835</td>\n",
       "      <td>0.038556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.500</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2097.2700</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>0.020145</td>\n",
       "      <td>0.831990</td>\n",
       "      <td>4.960170</td>\n",
       "      <td>0.293301</td>\n",
       "      <td>245.00</td>\n",
       "      <td>2.373528</td>\n",
       "      <td>0.033520</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>0.016760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.200</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>732.3800</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>0.022911</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.210005</td>\n",
       "      <td>0.439882</td>\n",
       "      <td>288.00</td>\n",
       "      <td>4.171889</td>\n",
       "      <td>0.022911</td>\n",
       "      <td>0.068732</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.930</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>994.7052</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>0.016164</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.004810</td>\n",
       "      <td>0.144347</td>\n",
       "      <td>232.18</td>\n",
       "      <td>0.870632</td>\n",
       "      <td>0.048493</td>\n",
       "      <td>0.048493</td>\n",
       "      <td>0.016164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8518</th>\n",
       "      <td>6.865</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2778.3834</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>0.061705</td>\n",
       "      <td>0.920247</td>\n",
       "      <td>5.373062</td>\n",
       "      <td>0.389818</td>\n",
       "      <td>178.49</td>\n",
       "      <td>12.181275</td>\n",
       "      <td>0.170350</td>\n",
       "      <td>0.170350</td>\n",
       "      <td>0.056783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8519</th>\n",
       "      <td>8.380</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>549.2850</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>1977.0</td>\n",
       "      <td>0.046952</td>\n",
       "      <td>1.000657</td>\n",
       "      <td>4.692787</td>\n",
       "      <td>0.393713</td>\n",
       "      <td>92.18</td>\n",
       "      <td>5.081479</td>\n",
       "      <td>0.046982</td>\n",
       "      <td>0.093965</td>\n",
       "      <td>0.046982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8520</th>\n",
       "      <td>10.600</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1193.1136</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>0.035203</td>\n",
       "      <td>0.999512</td>\n",
       "      <td>4.455770</td>\n",
       "      <td>0.372974</td>\n",
       "      <td>95.40</td>\n",
       "      <td>2.995140</td>\n",
       "      <td>0.035186</td>\n",
       "      <td>0.070373</td>\n",
       "      <td>0.035186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8521</th>\n",
       "      <td>7.210</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1845.5976</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1967.0</td>\n",
       "      <td>0.144823</td>\n",
       "      <td>1.002743</td>\n",
       "      <td>4.645671</td>\n",
       "      <td>1.047041</td>\n",
       "      <td>28.84</td>\n",
       "      <td>14.977070</td>\n",
       "      <td>0.290441</td>\n",
       "      <td>0.435662</td>\n",
       "      <td>0.290441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8522</th>\n",
       "      <td>14.800</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>765.6700</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>0.051565</td>\n",
       "      <td>0.870321</td>\n",
       "      <td>4.336859</td>\n",
       "      <td>0.664199</td>\n",
       "      <td>236.80</td>\n",
       "      <td>3.386829</td>\n",
       "      <td>0.044878</td>\n",
       "      <td>0.044878</td>\n",
       "      <td>0.044878</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8523 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Item_Weight  Item_Fat_Content  Outlet_Identifier  Outlet_Size  \\\n",
       "0           9.300                 0                  9            1   \n",
       "1           5.920                 1                  3            1   \n",
       "2          17.500                 0                  9            1   \n",
       "3          19.200                 1                  0            2   \n",
       "4           8.930                 0                  1            0   \n",
       "...           ...               ...                ...          ...   \n",
       "8518        6.865                 0                  1            0   \n",
       "8519        8.380                 1                  7            2   \n",
       "8520       10.600                 0                  6            2   \n",
       "8521        7.210                 1                  3            1   \n",
       "8522       14.800                 0                  8            2   \n",
       "\n",
       "      Outlet_Location_Type  Outlet_Type  Item_Outlet_Sales  New_Item_type  \\\n",
       "0                        0            1          3735.1380              1   \n",
       "1                        2            2           443.4228              0   \n",
       "2                        0            1          2097.2700              1   \n",
       "3                        2            0           732.3800              1   \n",
       "4                        2            1           994.7052              2   \n",
       "...                    ...          ...                ...            ...   \n",
       "8518                     2            1          2778.3834              1   \n",
       "8519                     1            1           549.2850              1   \n",
       "8520                     1            1          1193.1136              2   \n",
       "8521                     2            2          1845.5976              1   \n",
       "8522                     0            1           765.6700              0   \n",
       "\n",
       "      Outlet_Age  Item_Age  Visibility_Avg  Visibility_Ratio  Item_MRP_Log  \\\n",
       "0             14    1998.0        0.017387          0.922960      5.524692   \n",
       "1              4    2012.0        0.019219          1.003057      3.897299   \n",
       "2             14    1998.0        0.020145          0.831990      4.960170   \n",
       "3             15    2006.0        0.022911          1.000000      5.210005   \n",
       "4             26    1994.0        0.016164          1.000000      4.004810   \n",
       "...          ...       ...             ...               ...           ...   \n",
       "8518          26    1991.0        0.061705          0.920247      5.373062   \n",
       "8519          11    1977.0        0.046952          1.000657      4.692787   \n",
       "8520           9    1984.0        0.035203          0.999512      4.455770   \n",
       "8521           4    1967.0        0.144823          1.002743      4.645671   \n",
       "8522          16    2012.0        0.051565          0.870321      4.336859   \n",
       "\n",
       "      Item_Weight_x_Item_Visibility  Item_Weight_x_Outlet_Age  \\\n",
       "0                          0.149240                    130.20   \n",
       "1                          0.114127                     23.68   \n",
       "2                          0.293301                    245.00   \n",
       "3                          0.439882                    288.00   \n",
       "4                          0.144347                    232.18   \n",
       "...                             ...                       ...   \n",
       "8518                       0.389818                    178.49   \n",
       "8519                       0.393713                     92.18   \n",
       "8520                       0.372974                     95.40   \n",
       "8521                       1.047041                     28.84   \n",
       "8522                       0.664199                    236.80   \n",
       "\n",
       "      MRP_x_Visibility  Visibility_x_Size  Visibility_x_Tier  \\\n",
       "0             4.008763           0.032095           0.016047   \n",
       "1             0.930544           0.038556           0.057835   \n",
       "2             2.373528           0.033520           0.016760   \n",
       "3             4.171889           0.022911           0.068732   \n",
       "4             0.870632           0.048493           0.048493   \n",
       "...                ...                ...                ...   \n",
       "8518         12.181275           0.170350           0.170350   \n",
       "8519          5.081479           0.046982           0.093965   \n",
       "8520          2.995140           0.035186           0.070373   \n",
       "8521         14.977070           0.290441           0.435662   \n",
       "8522          3.386829           0.044878           0.044878   \n",
       "\n",
       "      Visibility_x_OutletType  \n",
       "0                    0.016047  \n",
       "1                    0.038556  \n",
       "2                    0.016760  \n",
       "3                    0.000000  \n",
       "4                    0.016164  \n",
       "...                       ...  \n",
       "8518                 0.056783  \n",
       "8519                 0.046982  \n",
       "8520                 0.035186  \n",
       "8521                 0.290441  \n",
       "8522                 0.044878  \n",
       "\n",
       "[8523 rows x 19 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "cbc40817-1c58-4657-a365-9f0301b9c32d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_pro.drop(columns=['Item_Outlet_Sales'])\n",
    "y = df_pro['Item_Outlet_Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "9c6fb37c-d613-432b-9c55-6d3048d7ed37",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "e44d79fe-5c06-48c7-94e9-1c410ddc6f3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_col = []\n",
    "for x in X_train.dtypes.index:\n",
    "    if X_train.dtypes[x]  ==  \"object\":\n",
    "        c_col.append(x)\n",
    "c_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "756f96d8-aa6a-47b9-bc97-3dbcfc3d3989",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgb\n",
    "from catboost import CatBoostRegressor\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "58876794-7730-4282-8ef5-3e844eba3ff0",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ModelLeaderboard:\n",
    "    def __init__(self):\n",
    "        self.leaderboard = []\n",
    "        self.models = {}\n",
    "    \n",
    "    def add_model_result(self, model_name, train_rmse, test_rmse, train_r2, test_r2, train_time, model=None):\n",
    "        \"\"\"Add model results to leaderboard\"\"\"\n",
    "        result = {\n",
    "            'Model': model_name,\n",
    "            'Train_RMSE': train_rmse,\n",
    "            'Test_RMSE': test_rmse,\n",
    "            'Train_R2': train_r2,\n",
    "            'Test_R2': test_r2,\n",
    "            'Overfit_Gap': test_rmse - train_rmse,\n",
    "            'Train_Time': train_time\n",
    "        }\n",
    "        self.leaderboard.append(result)\n",
    "        if model:\n",
    "            self.models[model_name] = model\n",
    "        self.display_leaderboard()\n",
    "    \n",
    "    def display_leaderboard(self):\n",
    "        \"\"\"Display current leaderboard sorted by Test RMSE\"\"\"\n",
    "        df = pd.DataFrame(self.leaderboard)\n",
    "        df_sorted = df.sort_values('Test_RMSE').reset_index(drop=True)\n",
    "        df_sorted.index = df_sorted.index + 1\n",
    "        print(\"\\n\" + \"=\"*80)\n",
    "        print(\"🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\")\n",
    "        print(\"=\"*80)\n",
    "        print(df_sorted.round(4))\n",
    "        print(\"=\"*80)\n",
    "    \n",
    "    def train_and_evaluate_models(self, X_train, X_test, y_train, y_test):\n",
    "        \"\"\"Train multiple models and evaluate them\"\"\"\n",
    "        \n",
    "        # 1. Linear Regression\n",
    "        print(\"🔄 Training Linear Regression...\")\n",
    "        start_time = time.time()\n",
    "        lr = LinearRegression()\n",
    "        lr.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = lr.predict(X_train)\n",
    "        test_pred = lr.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('Linear Regression', train_rmse, test_rmse, train_r2, test_r2, train_time, lr)\n",
    "        \n",
    "        # 2. Ridge Regression\n",
    "        print(\"🔄 Training Ridge Regression...\")\n",
    "        start_time = time.time()\n",
    "        ridge = Ridge(alpha=1.0, random_state=42)\n",
    "        ridge.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = ridge.predict(X_train)\n",
    "        test_pred = ridge.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('Ridge Regression', train_rmse, test_rmse, train_r2, test_r2, train_time, ridge)\n",
    "        \n",
    "        # 3. Lasso Regression\n",
    "        print(\"🔄 Training Lasso Regression...\")\n",
    "        start_time = time.time()\n",
    "        lasso = Lasso(alpha=0.1, random_state=42)\n",
    "        lasso.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = lasso.predict(X_train)\n",
    "        test_pred = lasso.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('Lasso Regression', train_rmse, test_rmse, train_r2, test_r2, train_time, lasso)\n",
    "        \n",
    "        # 4. Random Forest\n",
    "        print(\"🔄 Training Random Forest...\")\n",
    "        start_time = time.time()\n",
    "        rf = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)\n",
    "        rf.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = rf.predict(X_train)\n",
    "        test_pred = rf.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('Random Forest', train_rmse, test_rmse, train_r2, test_r2, train_time, rf)\n",
    "        \n",
    "        # 5. XGBoost\n",
    "        print(\"🔄 Training XGBoost...\")\n",
    "        start_time = time.time()\n",
    "        xgb_model = xgb.XGBRegressor(\n",
    "            n_estimators=100,\n",
    "            random_state=42,\n",
    "            eval_metric='rmse'\n",
    "        )\n",
    "        xgb_model.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = xgb_model.predict(X_train)\n",
    "        test_pred = xgb_model.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('XGBoost', train_rmse, test_rmse, train_r2, test_r2, train_time, xgb_model)\n",
    "        \n",
    "        # 6. LightGBM\n",
    "        print(\"🔄 Training LightGBM...\")\n",
    "        start_time = time.time()\n",
    "        lgb_model = lgb.LGBMRegressor(\n",
    "            n_estimators=100,\n",
    "            random_state=42,\n",
    "            verbose=-1\n",
    "        )\n",
    "        lgb_model.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = lgb_model.predict(X_train)\n",
    "        test_pred = lgb_model.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('LightGBM', train_rmse, test_rmse, train_r2, test_r2, train_time, lgb_model)\n",
    "        \n",
    "        # 7. CatBoost\n",
    "        print(\"🔄 Training CatBoost...\")\n",
    "        start_time = time.time()\n",
    "        cat_model = CatBoostRegressor(\n",
    "            iterations=100,\n",
    "            random_state=42,\n",
    "            verbose=False\n",
    "        )\n",
    "        cat_model.fit(X_train, y_train)\n",
    "        \n",
    "        train_pred = cat_model.predict(X_train)\n",
    "        test_pred = cat_model.predict(X_test)\n",
    "        \n",
    "        train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n",
    "        test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n",
    "        train_r2 = r2_score(y_train, train_pred)\n",
    "        test_r2 = r2_score(y_test, test_pred)\n",
    "        train_time = time.time() - start_time\n",
    "        \n",
    "        self.add_model_result('CatBoost', train_rmse, test_rmse, train_r2, test_r2, train_time, cat_model)\n",
    "        \n",
    "        print(\"\\n✅ All models trained successfully!\")\n",
    "        return self.get_best_model()\n",
    "    \n",
    "    def get_best_model(self):\n",
    "        \"\"\"Get the best performing model\"\"\"\n",
    "        if not self.leaderboard:\n",
    "            return None\n",
    "        \n",
    "        best_result = min(self.leaderboard, key=lambda x: x['Test_RMSE'])\n",
    "        best_model_name = best_result['Model']\n",
    "        \n",
    "        print(f\"\\n🥇 BEST MODEL: {best_model_name}\")\n",
    "        print(f\"Test RMSE: {best_result['Test_RMSE']:.4f}\")\n",
    "        \n",
    "        return self.models.get(best_model_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "4c2fd3cc-fdec-49b5-9785-3648785223a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔄 Training Linear Regression...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "\n",
      "   Train_Time  \n",
      "1       0.055  \n",
      "================================================================================\n",
      "🔄 Training Ridge Regression...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "2   Ridge Regression   1205.5734  1135.3051    0.5087   0.5258     -70.2683   \n",
      "\n",
      "   Train_Time  \n",
      "1      0.0550  \n",
      "2      0.0354  \n",
      "================================================================================\n",
      "🔄 Training Lasso Regression...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "2   Ridge Regression   1205.5734  1135.3051    0.5087   0.5258     -70.2683   \n",
      "3   Lasso Regression   1205.5699  1135.3241    0.5087   0.5258     -70.2458   \n",
      "\n",
      "   Train_Time  \n",
      "1      0.0550  \n",
      "2      0.0354  \n",
      "3      0.7040  \n",
      "================================================================================\n",
      "🔄 Training Random Forest...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1      Random Forest    430.2173  1067.4187    0.9374   0.5808     637.2014   \n",
      "2  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "3   Ridge Regression   1205.5734  1135.3051    0.5087   0.5258     -70.2683   \n",
      "4   Lasso Regression   1205.5699  1135.3241    0.5087   0.5258     -70.2458   \n",
      "\n",
      "   Train_Time  \n",
      "1      2.3524  \n",
      "2      0.0550  \n",
      "3      0.0354  \n",
      "4      0.7040  \n",
      "================================================================================\n",
      "🔄 Training XGBoost...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1      Random Forest    430.2173  1067.4187    0.9374   0.5808     637.2014   \n",
      "2            XGBoost    542.4923  1105.2359    0.9005   0.5506     562.7436   \n",
      "3  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "4   Ridge Regression   1205.5734  1135.3051    0.5087   0.5258     -70.2683   \n",
      "5   Lasso Regression   1205.5699  1135.3241    0.5087   0.5258     -70.2458   \n",
      "\n",
      "   Train_Time  \n",
      "1      2.3524  \n",
      "2      0.3462  \n",
      "3      0.0550  \n",
      "4      0.0354  \n",
      "5      0.7040  \n",
      "================================================================================\n",
      "🔄 Training LightGBM...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1           LightGBM    834.3729  1048.8104    0.7646   0.5953     214.4375   \n",
      "2      Random Forest    430.2173  1067.4187    0.9374   0.5808     637.2014   \n",
      "3            XGBoost    542.4923  1105.2359    0.9005   0.5506     562.7436   \n",
      "4  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "5   Ridge Regression   1205.5734  1135.3051    0.5087   0.5258     -70.2683   \n",
      "6   Lasso Regression   1205.5699  1135.3241    0.5087   0.5258     -70.2458   \n",
      "\n",
      "   Train_Time  \n",
      "1      0.3501  \n",
      "2      2.3524  \n",
      "3      0.3462  \n",
      "4      0.0550  \n",
      "5      0.0354  \n",
      "6      0.7040  \n",
      "================================================================================\n",
      "🔄 Training CatBoost...\n",
      "\n",
      "================================================================================\n",
      "🏆 MODEL LEADERBOARD (Sorted by Test RMSE)\n",
      "================================================================================\n",
      "               Model  Train_RMSE  Test_RMSE  Train_R2  Test_R2  Overfit_Gap  \\\n",
      "1           CatBoost    862.9662  1046.9016    0.7482   0.5968     183.9354   \n",
      "2           LightGBM    834.3729  1048.8104    0.7646   0.5953     214.4375   \n",
      "3      Random Forest    430.2173  1067.4187    0.9374   0.5808     637.2014   \n",
      "4            XGBoost    542.4923  1105.2359    0.9005   0.5506     562.7436   \n",
      "5  Linear Regression   1205.5036  1135.2362    0.5087   0.5258     -70.2674   \n",
      "6   Ridge Regression   1205.5734  1135.3051    0.5087   0.5258     -70.2683   \n",
      "7   Lasso Regression   1205.5699  1135.3241    0.5087   0.5258     -70.2458   \n",
      "\n",
      "   Train_Time  \n",
      "1      0.6597  \n",
      "2      0.3501  \n",
      "3      2.3524  \n",
      "4      0.3462  \n",
      "5      0.0550  \n",
      "6      0.0354  \n",
      "7      0.7040  \n",
      "================================================================================\n",
      "\n",
      "✅ All models trained successfully!\n",
      "\n",
      "🥇 BEST MODEL: CatBoost\n",
      "Test RMSE: 1046.9016\n"
     ]
    }
   ],
   "source": [
    "# Usage Example:\n",
    "\n",
    "# Initialize the leaderboard\n",
    "leaderboard = ModelLeaderboard()\n",
    "\n",
    "# Train and evaluate all models\n",
    "best_model = leaderboard.train_and_evaluate_models(X_train, X_test, y_train, y_test)\n",
    "\n",
    "# Access the leaderboard dataframe if needed\n",
    "results_df = pd.DataFrame(leaderboard.leaderboard)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "3ffd87d7-3014-4720-907a-cb84b8ffe8af",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_model = CatBoostRegressor(\n",
    "            iterations=100,\n",
    "            random_state=42,\n",
    "            verbose=False\n",
    "        )\n",
    "best_model = cat_model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "55144a5f-a2fd-4828-a442-d8e0b1e5971c",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_pro = pipeline.fit_transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "2aef3f7a-5d52-4f0a-b0b8-66c4e7b21232",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_col = []\n",
    "for x in test_pro.dtypes.index:\n",
    "    if test_pro.dtypes[x]  ==  \"object\":\n",
    "        c_col.append(x)\n",
    "c_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "a310700d-ba05-47ee-b7a6-90b1409fb927",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = best_model.predict(test_pro)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "eb6a5828-17a2-4e73-b887-1fd3962c69f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1756.65550378, 1682.80345555,  934.53051967, ..., 2112.34521471,\n",
       "       3309.81515081, 1121.392177  ])"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "a58f1f4c-782d-4327-863c-0511883a6792",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Submission file created!\n",
      "  Item_Identifier Outlet_Identifier  Item_Outlet_Sales\n",
      "0           FDW58            OUT049        1756.655504\n",
      "1           FDW14            OUT017        1682.803456\n",
      "2           NCN55            OUT010         934.530520\n",
      "3           FDQ58            OUT017        2110.976102\n",
      "4           FDY38            OUT027        6473.364446\n"
     ]
    }
   ],
   "source": [
    "# Create submission file with correct format\n",
    "submission = pd.DataFrame({\n",
    "   'Item_Identifier': test['Item_Identifier'],\n",
    "   'Outlet_Identifier': test['Outlet_Identifier'], \n",
    "   'Item_Outlet_Sales': pred\n",
    "})\n",
    "\n",
    "# Save submission file\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "print(\"Submission file created!\")\n",
    "print(submission.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebabdf03-14ed-4a36-a269-6eca3ce33aa6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
